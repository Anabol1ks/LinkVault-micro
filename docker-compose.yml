# services:
#   kafka:
#     image: apache/kafka:4.0.0
#     container_name: kafka
#     environment:
#       - KAFKA_PROCESS_ROLES=broker,controller
#       - KAFKA_NODE_ID=1
#       # Настраиваем отдельные listeners: INTERNAL (для контейнерной сети) и EXTERNAL (для хоста Windows)
#       - KAFKA_LISTENERS=INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
#       - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://host.docker.internal:9092
#       - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
#       - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
#       - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
#       - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
#       - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
#       - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
#       - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
#       - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
#     ports:
#       - "9092:9092"   # внешний доступ (EXTERNAL)
#       - "29092:29092" # при необходимости тестов из других контейнеров можно тоже использовать
#     healthcheck:
#       test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

services:
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    environment:
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://host.docker.internal:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: auth-db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  link-db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${LINK_DB_USER}
      POSTGRES_PASSWORD: ${LINK_DB_PASSWORD}
      POSTGRES_DB: link-db
    volumes:
      - link_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  auth-service:
    build: ./auth-service
    env_file:
      - ./auth-service/.env
    depends_on:
      - auth-db
      - kafka
    ports:
      - "8081:8081"
    restart: unless-stopped

  link-service:
    build: ./link-service
    env_file:
      - ./link-service/.env
    depends_on:
      - link-db
      - kafka
    ports:
      - "8082:8082"
    restart: unless-stopped

  notification-service:
    build: ./notification-service
    env_file:
      - ./notification-service/.env
    volumes:
      - ./notification-service/internal/sender/templates:/app/internal/sender/templates:ro
    depends_on:
      - kafka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "pgrep linkvault-notification >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  auth_db_data:
  link_db_data: